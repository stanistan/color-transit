;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name color-transit.color, :imports nil, :requires nil, :uses nil, :defs {as-color-set {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 67, :column 7, :end-line 67, :end-column 19, :arglists (quote ([colors]))}, :name color-transit.color/as-color-set, :variadic false, :file "src/color-transit/color.cljs", :end-column 19, :method-params ([colors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([colors]))}, partition-colors-into {:name color-transit.color/partition-colors-into, :file "src/color-transit/color.cljs", :line 73, :column 1, :end-line 73, :end-column 32, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 73, :column 11, :end-line 73, :end-column 32}}, create-queue {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 32, :column 7, :end-line 32, :end-column 19, :arglists (quote ([from-color to-color steps]))}, :name color-transit.color/create-queue, :variadic false, :file "src/color-transit/color.cljs", :end-column 19, :method-params ([from-color to-color steps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists (quote ([from-color to-color steps]))}, compute-next-state {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 43, :column 7, :end-line 43, :end-column 25, :arglists (quote ([{:keys [color-queue current-color colors], :as color-map} steps permute-colors-fn])), :doc "Given color settings, return the next  value."}, :name color-transit.color/compute-next-state, :variadic false, :file "src/color-transit/color.cljs", :end-column 25, :method-params ([p__5808 steps permute-colors-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [color-queue current-color colors], :as color-map} steps permute-colors-fn])), :doc "Given color settings, return the next  value."}, find-next {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([current color-list])), :doc "Given a color and the list of colors to choose from, find the\n   next color."}, :name color-transit.color/find-next, :variadic false, :file "src/color-transit/color.cljs", :end-column 16, :method-params ([current color-list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([current color-list])), :doc "Given a color and the list of colors to choose from, find the\n   next color."}, +delta {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 13, :column 7, :end-line 13, :end-column 13, :arglists (quote ([[r g b] [r+ g+ b+] scalar]))}, :name color-transit.color/+delta, :variadic false, :file "src/color-transit/color.cljs", :end-column 13, :method-params ([p__5790 p__5791 scalar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[r g b] [r+ g+ b+] scalar]))}, style {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 3, :column 7, :end-line 3, :end-column 12, :arglists (quote ([[r g b]]))}, :name color-transit.color/style, :variadic false, :file "src/color-transit/color.cljs", :end-column 12, :method-params ([p__5781]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[r g b]]))}, ->sets {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 84, :column 7, :end-line 84, :end-column 13, :arglists (quote ([colors num-sets partition-fn]))}, :name color-transit.color/->sets, :variadic false, :file "src/color-transit/color.cljs", :end-column 13, :method-params ([colors num-sets partition-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 3, :fn-var true, :arglists (quote ([colors num-sets partition-fn]))}, delta {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([[r1 g1 b1] [r2 g2 b2] steps]))}, :name color-transit.color/delta, :variadic false, :file "src/color-transit/color.cljs", :end-column 12, :method-params ([p__5784 p__5785 steps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[r1 g1 b1] [r2 g2 b2] steps]))}, with-color-and-queue {:protocol-inline nil, :meta {:file "/Users/stanistan/dev/color-transit/src/color-transit/color.cljs", :line 37, :column 7, :end-line 37, :end-column 27, :arglists (quote ([color-map c q & [colors]])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(color-map c q [colors])], :arglists ([color-map c q & [colors]]), :arglists-meta (nil)}}, :name color-transit.color/with-color-and-queue, :variadic true, :file "src/color-transit/color.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(color-map c q [colors])], :arglists ([color-map c q & [colors]]), :arglists-meta (nil)}, :method-params [(color-map c q [colors])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists ([color-map c q & [colors]])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:shuffle :else :default :colors mod :partition ncolors zero? num-sets :color-queue :current-color :hierarchy}, :order [:else :color-queue :current-color :colors :hierarchy :default :shuffle :partition zero? mod ncolors num-sets]}, :doc nil}